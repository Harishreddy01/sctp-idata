//
// Copyright (c) 2016 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

// Create a passive non-blocking 1-to-1 style socket supporting I_DATA.
+0.0 socket(..., SOCK_STREAM, IPPROTO_SCTP) = 3
// The following shouldn't be needed, but right now it is...
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_NODELAY, [1], 4) = 0
+0.0 fcntl(3, F_GETFL) = 0x02 (flags O_RDWR)
+0.0 fcntl(3, F_SETFL, O_RDWR | O_NONBLOCK) = 0
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_FRAGMENT_INTERLEAVE, [2], 4) = 0
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_INTERLEAVING_SUPPORTED, {assoc_value=1}, 8) = 0
+0.0 setsockopt(3, IPPROTO_SCTP, SCTP_INITMSG, {sinit_num_ostreams=2,
                                                sinit_max_instreams=1,
                                                sinit_max_attempts=0,
                                                sinit_max_init_timeo=0}, 8) = 0
+0.0 bind(3, ..., ...) = 0
+0.0 listen(3, 1) = 0
// Establish an association supporting I_DATA.
+0.0 < sctp: INIT[flgs=0, tag=1, a_rwnd=65535, os=1, is=2, tsn=1,
                  SUPPORTED_EXTENSIONS[types=[I_DATA]]]
+0.0 > sctp: INIT_ACK[flgs=0, tag=2, a_rwnd=..., os=2, is=1, tsn=1, ...]
+0.1 < sctp: COOKIE_ECHO[flgs=0, len=..., val=...]
+0.0 > sctp: COOKIE_ACK[flgs=0]
+0.0 accept(3, ..., ...) = 4
+0.0 close(3) = 0
// Send two complete fragmented user messages followed by two fragmented 
// unordered user message on two streams.
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), 0, 0, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=B, len=1468, tsn=1, sid=0, mid=0, ppid=1234]
+0.0 > sctp: I_DATA[flgs=E, len=572, tsn=2, sid=0, mid=0, fsn=1]
+0.0 < sctp: SACK[flgs=0, cum_tsn=1, a_rwnd=65535, gaps=[], dups=[]]
+0.2 < sctp: SACK[flgs=0, cum_tsn=2, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), 0, 0, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=B, len=1468, tsn=3, sid=0, mid=1, ppid=1234]
+0.0 > sctp: I_DATA[flgs=E, len=572, tsn=4, sid=0, mid=1, fsn=1]
+0.0 < sctp: SACK[flgs=0, cum_tsn=4, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), SCTP_UNORDERED, 0, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=UB, len=1468, tsn=5, sid=0, mid=0, ppid=1234]
+0.0 > sctp: I_DATA[flgs=UE, len=572, tsn=6, sid=0, mid=0, fsn=1]
+0.0 < sctp: SACK[flgs=0, cum_tsn=6, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), SCTP_UNORDERED, 0, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=UB, len=1468, tsn=7, sid=0, mid=1, ppid=1234]
+0.0 > sctp: I_DATA[flgs=UE, len=572, tsn=8, sid=0, mid=1, fsn=1]
+0.2 < sctp: SACK[flgs=0, cum_tsn=8, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), 0, 1, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=B, len=1468, tsn=9, sid=1, mid=0, ppid=1234]
+0.0 > sctp: I_DATA[flgs=E, len=572, tsn=10, sid=1, mid=0, fsn=1]
+0.0 < sctp: SACK[flgs=0, cum_tsn=10, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), 0, 1, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=B, len=1468, tsn=11, sid=1, mid=1, ppid=1234]
+0.0 > sctp: I_DATA[flgs=E, len=572, tsn=12, sid=1, mid=1, fsn=1]
+0.0 < sctp: SACK[flgs=0, cum_tsn=12, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), SCTP_UNORDERED, 1, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=UB, len=1468, tsn=13, sid=1, mid=0, ppid=1234]
+0.0 > sctp: I_DATA[flgs=UE, len=572, tsn=14, sid=1, mid=0, fsn=1]
+0.0 < sctp: SACK[flgs=0, cum_tsn=14, a_rwnd=65535, gaps=[], dups=[]]
+0.0 sctp_sendmsg(4, ..., 2000, ..., ..., htonl(1234), SCTP_UNORDERED, 1, 0, 0) = 2000
+0.0 > sctp: I_DATA[flgs=UB, len=1468, tsn=15, sid=1, mid=1, ppid=1234]
+0.0 > sctp: I_DATA[flgs=UE, len=572, tsn=16, sid=1, mid=1, fsn=1]
+0.2 < sctp: SACK[flgs=0, cum_tsn=16, a_rwnd=65535, gaps=[], dups=[]]
+0.1 < sctp: SHUTDOWN[flgs=0, cum_tsn=16]
+0.0 > sctp: SHUTDOWN_ACK[flgs=0]
+0.1 < sctp: SHUTDOWN_COMPLETE[flgs=0]
+0.0 close(4) = 0
